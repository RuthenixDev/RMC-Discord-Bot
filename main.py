import discord, os, traceback
from discord.ext import commands
from dotenv import load_dotenv
import healthcheck

load_dotenv()
TOKEN = os.getenv("TOKEN")
COGS_DIR = "cogs"

print("üöÄ –°—Ç–∞—Ä—Ç main.py")


print("üîÑ –ó–∞–ø—É—Å–∫ healthcheck...")
healthcheck.start_in_background()
print("‚úÖ Healthcheck –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")




intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!rmc ", intents=intents, help_command=None)

bot.load_errors = []       # —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–≥–æ–≤
bot.last_critical_error = None  # —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏



@bot.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    try:
        synced = await bot.tree.sync()  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        print(f"üåç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {len(synced)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    for guild in bot.guilds:
        try:
            synced = await bot.tree.sync(guild=guild)
            print(f"üìÇ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–º–∞–Ω–¥—ã –≤ –≥–∏–ª—å–¥–∏–∏ {guild.name}: {len(synced)}")
        except discord.errors.Forbidden:
            print(f"‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –≥–∏–ª—å–¥–∏–∏ {guild.id} ({guild.name})")


async def load_cogs():
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤...")
    for filename in os.listdir(COGS_DIR):
        if filename.endswith(".py"):
            cog_name = f"{COGS_DIR}.{filename[:-3]}"
            try:
                await bot.load_extension(cog_name)
                print(f"‚úÖ –ö–æ–≥ {cog_name} –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                tb = traceback.format_exc()
                bot.load_errors.append(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {cog_name}: {e}")
                bot.last_critical_error = tb
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {cog_name}:\n{tb}")

@commands.Cog.listener()
async def on_command_error(self, ctx: commands.Context, error):
    if isinstance(error, commands.CheckFailure):
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ slash
        if hasattr(ctx, "interaction") and ctx.interaction:
            await ctx.interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                ephemeral=True
            )
        else:
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    raise error


@bot.event
async def on_error(event, *args, **kwargs):
    bot.last_critical_error = traceback.format_exc()



async def main():
    async with bot:
        await load_cogs()
        print("üîë –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Discord...")
        await bot.start(TOKEN)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
