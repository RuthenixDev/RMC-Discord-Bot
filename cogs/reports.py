import discord
from discord.ext import commands
from discord import app_commands
from utils import settings_cache as settings
from discord.ui import View, Button
import sys
import os
from constants import RMC_EMBED_COLOR

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class Reports(commands.Cog):

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    async def cog_check(self, ctx: commands.Context):
        data = settings.load_settings()
        admin_roles = data.get("admin_roles", [])

        if ctx.author.guild_permissions.administrator:
            return True
        if any(str(role.id) in admin_roles for role in ctx.author.roles):
            return True

        raise commands.CheckFailure()

    # ====== –†–∞–±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ======
    def update_report_channels(self, new_ids):
        data = settings.load_settings()

        data["report_channels"] = list(new_ids)
        settings.save_settings(data)

    def update_report_blacklist(self, new_ids):
        data = settings.load_settings()

        data["report_blacklist"] = list(new_ids)
        settings.save_settings(data)

    # ====== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤ ======
    @commands.hybrid_command(
        name="addreport",
        with_app_command=True,  # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ slash
        description="–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ä–µ–ø–æ—Ä—Ç—ã"
    )
    @commands.has_permissions(manage_channels=True)
    async def addreport(self, ctx, channel: discord.TextChannel = None):
        if channel is None:
            channel = ctx.channel
        data = settings.load_settings()

        report_channel_ids = set(data.get("report_channels", []))

        if channel.id in report_channel_ids:
            embed = discord.Embed(
                description=f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel.mention} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–ø–æ—Ä—Ç–æ–≤.",
                color=discord.Color.dark_gray()
            )
            await ctx.reply(
                embed=embed
            )
            return

        report_channel_ids.add(channel.id)
        self.update_report_channels(report_channel_ids)
        embed = discord.Embed(
            description=f"‚úÖ –ö–∞–Ω–∞–ª {channel.mention} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤.",
            color=discord.Color.green()
        )
        await ctx.reply(
            embed=embed
        )

    @commands.hybrid_command(
        name="removereport",
        with_app_command=True,  # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ slash
        description="–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ä–µ–ø–æ—Ä—Ç—ã"
    )
    @commands.has_permissions(manage_channels=True)
    async def removereport(self, ctx, channel: discord.TextChannel = None):
        if channel is None:
            channel = ctx.channel

        data = settings.load_settings()

        report_channel_ids = set(data.get("report_channels", []))

        if channel.id not in report_channel_ids:
            embed = discord.Embed(
                description=f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel.mention} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–ø–æ—Ä—Ç–æ–≤.",
                color=discord.Color.dark_gray()
            )
            await ctx.reply(
                embed=embed
            )
            return

        report_channel_ids.remove(channel.id)
        self.update_report_channels(report_channel_ids)
        embed = discord.Embed(
            description=f"‚ùå –ö–∞–Ω–∞–ª {channel.mention} —É–¥–∞–ª—ë–Ω –∏–∑ —Ä–µ–ø–æ—Ä—Ç–æ–≤.",
            color=discord.Color.dark_red()
        )
        await ctx.reply(
            embed=embed
        )
    @commands.hybrid_command(
        name="listreports",
        with_app_command=True,  # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ slash
        description="–°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç-–∫–∞–Ω–∞–ª–æ–≤"
    )
    async def listreports(self, ctx):
        data = settings.load_settings()

        report_channel_ids = set(data.get("report_channels", []))

        if not report_channel_ids:
            embed = discord.Embed(
                description="üì≠ –°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç-–∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.",
                color=discord.Color.dark_gray()
            )
            await ctx.reply(
                embed=embed
            )
            return

        embed = discord.Embed(title="üö® –ö–∞–Ω–∞–ª—ã –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤", color=RMC_EMBED_COLOR)
        for cid in report_channel_ids:
            channel = self.bot.get_channel(cid)
            if channel:
                embed.add_field(name=channel.name, value=channel.mention, inline=False)
            else:
                embed.add_field(name="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", value=f"ID: {cid}", inline=False)
        await ctx.send(embed=embed)
    @commands.hybrid_command(
        name="report_addblacklist",
        with_app_command=True,
        description="–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤."
    )
    @commands.has_permissions(kick_members=True)
    async def report_addblacklist(self, ctx, member: discord.Member):
        data = settings.load_settings()

        blacklist = set(data.get("report_blacklist", []))

        if member.id in blacklist:
            embed = discord.Embed(
                description=f"‚ö†Ô∏è {member.mention} —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed)
            return
        else:
            blacklist.add(member.id)
            self.update_report_blacklist(blacklist)

            embed = discord.Embed(
                description=f"‚úÖ {member.mention} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤.",
                color=discord.Color.green()
            )
            await ctx.reply(embed=embed)

    @commands.hybrid_command(
            name="report_removeblacklist",
            with_app_command=True,
            description="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤"
    )
    @commands.has_permissions(kick_members=True)
    async def report_removeblacklist(self, ctx, member: discord.Member):
        data = settings.load_settings()
        blacklist = set(data.get("report_blacklist", []))

        if member.id not in blacklist:
            embed = discord.Embed(
                description=f"‚ùå {member.mention} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.",
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed)
            return

        blacklist.remove(member.id)
        self.update_report_blacklist(blacklist)

        embed = discord.Embed(
            description=f"‚úÖ {member.mention} —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤.",
            color=discord.Color.green()
        )
        await ctx.reply(embed=embed)

    @commands.hybrid_command(
            name="report_showblacklist",
            with_app_command=True,
            description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤."
    )
    @commands.has_permissions(kick_members=True)
    async def report_showblacklist(self, ctx):
        data = settings.load_settings()

        blacklist = set(data.get("report_blacklist", []))

        if not blacklist:
            embed = discord.Embed(
                description="üì≠ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.",
                color=RMC_EMBED_COLOR
            )
            await ctx.reply(embed=embed)
            return

        embed = discord.Embed(title="üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤", color=RMC_EMBED_COLOR)
        for uid in blacklist:
            user = ctx.guild.get_member(uid)
            if user:
                embed.add_field(name=user.display_name, value=user.mention, inline=False)
            else:
                embed.add_field(name="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"ID: {uid}", inline=False)

        await ctx.send(embed=embed)
    
#----------------------------------------------
    # ====== –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞ ======
    async def send_report(self, guild: discord.Guild, reporter: discord.Member, target_message: discord.Message, reason: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ embed-–∞ —Å –∂–∞–ª–æ–±–æ–π –≤ —Ä–µ–ø–æ—Ä—Ç-–∫–∞–Ω–∞–ª—ã, —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ß–° –∏ –æ—Ç–≤–µ—Ç–∞"""
        data = settings.load_settings()

        report_channel_ids = set(data.get("report_channels", []))
        admin_roles_ids = set(data.get("admin_roles", []))
        blacklist = set(data.get("report_blacklist", []))

        if not report_channel_ids:
            print("–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç ‚Äî –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!")
            return

        if reporter.id in blacklist:
            admin_mentions = "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!"
        else:
            admin_mentions = " ".join(
                role.mention
                for rid in admin_roles_ids
                if (role := guild.get_role(rid))
            ) or "‚ö†Ô∏è (–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-—Ä–æ–ª–µ–π)"

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π embed
        embed = discord.Embed(
            title="üö® –ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç",
            color=discord.Color.red(),
            timestamp=discord.utils.utcnow()
        )
        embed.add_field(name="üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∂–∞–ª–æ–±—ã", value=f"{reporter.mention} (`{reporter.id}`)", inline=True)
        embed.add_field(name="üìù –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è", value=f"{target_message.author.mention} (`{target_message.author.id}`)", inline=True)
        embed.add_field(name="üìã –ü—Ä–∏—á–∏–Ω–∞", value=reason or "‚Äî", inline=False)
        embed.add_field(name="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ", value=f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é]({target_message.jump_url})\n```{target_message.content[:100]}{'...' if len(target_message.content) > 100 else ''}```", inline=False)
        embed.add_field(name="üìä –°—Ç–∞—Ç—É—Å", value="‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è", inline=True)
        embed.add_field(name="üìÖ –î–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", value=f"<t:{int(target_message.created_at.timestamp())}:R>", inline=True)
        embed.set_footer(text=f"ID —Ä–µ–ø–æ—Ä—Ç–∞: {target_message.id}")

        thread = None
        report_message = None

        for cid in report_channel_ids:
            if channel := guild.get_channel(cid):
                report_message = await channel.send(admin_mentions, embed=embed)
                break

        if report_message:
            try:
                thread_name = f"–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞ –æ—Ç {reporter.display_name}"
                
                thread = await report_message.create_thread(
                    name=thread_name[:100],  
                    reason=f"–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞ –æ—Ç {reporter}"
                )
                
                welcome_embed = discord.Embed(
                    title="üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞",
                    color=discord.Color.blue(),
                    description=(
                        f"**–†–µ–ø–æ—Ä—Ç –æ—Ç:** {reporter.mention}\n"
                        f"**–ù–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:** {target_message.author.mention}\n"
                        f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason or '‚Äî'}\n"
                        f"**–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:** [–ü–µ—Ä–µ–π—Ç–∏]({target_message.jump_url})\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –≤–µ—Ç–∫—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–∞."
                    )
                )
                await thread.send(embed=welcome_embed)
                
                embed.add_field(
                    name="üí¨ –í–µ—Ç–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è", 
                    value=f"[–ü–µ—Ä–µ–π—Ç–∏ –≤ –≤–µ—Ç–∫—É]({thread.jump_url})", 
                    inline=False
                )
                
                await report_message.edit(embed=embed)
                
            except discord.HTTPException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ—Ç–∫–∏: {e}")
                thread = None

        # --- View —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
        class ReportView(discord.ui.View):
            def __init__(self, reporter: discord.Member, guild: discord.Guild, blacklist: set, admin_roles_ids: set, thread: discord.Thread = None):
                super().__init__(timeout=None)
                self.reporter = reporter
                self.guild = guild
                self.blacklist = blacklist
                self.admin_roles_ids = admin_roles_ids
                self.thread = thread

                if reporter.id in blacklist:
                    self.add_item(RemoveBlacklistButton())
                else:
                    self.add_item(AddBlacklistButton())

                self.add_item(GiveAnswerButton())

                self.add_item(QuickCloseButton())
                
                if thread:
                    self.add_item(GoToThreadButton())

        class AddBlacklistButton(discord.ui.Button):
            def __init__(self):
                super().__init__(label="üö´ –î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°", style=discord.ButtonStyle.danger, emoji="üö´")

            async def callback(self, interaction: discord.Interaction):
                if not any(r.id in self.view.admin_roles_ids for r in interaction.user.roles):
                    await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", ephemeral=True)
                    return

                confirm_view = ConfirmView("–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–° —Ä–µ–ø–æ—Ä—Ç–æ–≤?")
                await interaction.response.send_message(
                    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å {self.view.reporter.mention} –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤?",
                    view=confirm_view,
                    ephemeral=True
                )
                
                await confirm_view.wait()
                if confirm_view.value:
                    data = settings.load_settings()
                    blacklist = set(data.get("report_blacklist", []))

                    if self.view.reporter.id in blacklist:
                        await interaction.edit_original_response(content="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ß–°.", view=None)
                        return

                    blacklist.add(self.view.reporter.id)
                    data["report_blacklist"] = list(blacklist)
                    settings.save_settings(data)

                    await interaction.edit_original_response(
                        content=f"‚úÖ {self.view.reporter.mention} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤.",
                        view=None
                    )
                    
                    embed = interaction.message.embeds[0]
                    embed.set_field_at(0, 
                        name="üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∂–∞–ª–æ–±—ã", 
                        value=f"{self.view.reporter.mention} (`{self.view.reporter.id}`) üö´", 
                        inline=True
                    )
                    await interaction.message.edit(embed=embed, view=ReportView(self.view.reporter, self.view.guild, blacklist, self.view.admin_roles_ids, self.view.thread))

        class RemoveBlacklistButton(discord.ui.Button):
            def __init__(self):
                super().__init__(label="‚úÖ –£–¥–∞–ª–∏—Ç—å –∏–∑ –ß–°", style=discord.ButtonStyle.success, emoji="‚úÖ")

            async def callback(self, interaction: discord.Interaction):
                if not any(r.id in self.view.admin_roles_ids for r in interaction.user.roles):
                    await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", ephemeral=True)
                    return

                confirm_view = ConfirmView("–£–¥–∞–ª–∏—Ç—å –∏–∑ –ß–° —Ä–µ–ø–æ—Ä—Ç–æ–≤?")
                await interaction.response.send_message(
                    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {self.view.reporter.mention} –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤?",
                    view=confirm_view,
                    ephemeral=True
                )
                
                await confirm_view.wait()
                if confirm_view.value:
                    data = settings.load_settings()
                    blacklist = set(data.get("report_blacklist", []))

                    if self.view.reporter.id not in blacklist:
                        await interaction.edit_original_response(content="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ß–°.", view=None)
                        return

                    blacklist.remove(self.view.reporter.id)
                    data["report_blacklist"] = list(blacklist)
                    settings.save_settings(data)

                    await interaction.edit_original_response(
                        content=f"‚ôªÔ∏è {self.view.reporter.mention} —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤.",
                        view=None
                    )
                    
                    embed = interaction.message.embeds[0]
                    embed.set_field_at(0, 
                        name="üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∂–∞–ª–æ–±—ã", 
                        value=f"{self.view.reporter.mention} (`{self.view.reporter.id}`)", 
                        inline=True
                    )
                    await interaction.message.edit(embed=embed, view=ReportView(self.view.reporter, self.view.guild, blacklist, self.view.admin_roles_ids, self.view.thread))

        class GiveAnswerButton(discord.ui.Button):
            def __init__(self):
                super().__init__(label="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", style=discord.ButtonStyle.primary, emoji="üí¨")

            async def callback(self, interaction: discord.Interaction):
                if not any(r.id in self.view.admin_roles_ids for r in interaction.user.roles):
                    await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–µ–ø–æ—Ä—Ç—ã.", ephemeral=True)
                    return

                view = AnswerTypeView(interaction.message)
                await interaction.response.send_message(
                    "üìã **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:**\n\n"
                    "‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ** - –∂–∞–ª–æ–±–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –ø—Ä–∏–Ω—è—Ç—ã –º–µ—Ä—ã\n"
                    "‚è≠Ô∏è **–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ** - –∂–∞–ª–æ–±–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π\n"
                    "‚ùå **–û—Ç–º–µ–Ω–∏—Ç—å** - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                    view=view,
                    ephemeral=True
                )

        class QuickCloseButton(discord.ui.Button):
            def __init__(self):
                super().__init__(label="üîí –ë—ã—Å—Ç—Ä–æ –∑–∞–∫—Ä—ã—Ç—å", style=discord.ButtonStyle.secondary, emoji="üîí")

            async def callback(self, interaction: discord.Interaction):
                if not any(r.id in self.view.admin_roles_ids for r in interaction.user.roles):
                    await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ–ø–æ—Ä—Ç–æ–≤.", ephemeral=True)
                    return

                embed = interaction.message.embeds[0]
                embed.set_field_at(4, name="üìä –°—Ç–∞—Ç—É—Å", value="üîí –ó–∞–∫—Ä—ã—Ç–æ", inline=True)
                embed.color = discord.Color.green()
                embed.add_field(name="üëÆ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", value=interaction.user.mention, inline=True)
                embed.add_field(name="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", value="–†–µ—à–µ–Ω–æ (–±—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)", inline=False)

                if self.view.thread:
                    try:
                        await self.view.thread.edit(archived=True, locked=True, reason="–†–µ–ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç")
                    except discord.HTTPException:
                        pass

                await interaction.message.edit(embed=embed, view=None)
                await interaction.response.send_message("‚úÖ –†–µ–ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç.", ephemeral=True)

        class GoToThreadButton(discord.ui.Button):
            def __init__(self):
                super().__init__(label="üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ", style=discord.ButtonStyle.blurple, emoji="üí¨")

            async def callback(self, interaction: discord.Interaction):
                if self.view.thread:
                    await interaction.response.send_message(
                        f"üìé –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é: {self.view.thread.mention}",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        "‚ùå –í–µ—Ç–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        ephemeral=True
                    )

        class ConfirmView(discord.ui.View):
            def __init__(self, label: str):
                super().__init__(timeout=30)
                self.value = None

            @discord.ui.button(label="–î–∞", style=discord.ButtonStyle.danger)
            async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
                self.value = True
                self.stop()

            @discord.ui.button(label="–ù–µ—Ç", style=discord.ButtonStyle.secondary)
            async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
                self.value = False
                self.stop()

        class AnswerTypeView(discord.ui.View):
            def __init__(self, report_message: discord.Message):
                super().__init__(timeout=120)
                self.report_message = report_message

            @discord.ui.button(label="–í—ã–ø–æ–ª–Ω–µ–Ω–æ", style=discord.ButtonStyle.success, emoji="‚úÖ")
            async def done_button(self, interaction: discord.Interaction, button: discord.ui.Button):
                await interaction.response.send_modal(ReportCommentModal(self.report_message, "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"))

            @discord.ui.button(label="–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ", style=discord.ButtonStyle.secondary, emoji="‚è≠Ô∏è")
            async def ignore_button(self, interaction: discord.Interaction, button: discord.ui.Button):
                await interaction.response.send_modal(ReportCommentModal(self.report_message, "‚è≠Ô∏è –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ"))

            @discord.ui.button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, emoji="‚ùå")
            async def cancel_button(self, interaction: discord.Interaction, button: discord.ui.Button):
                await interaction.response.edit_message(content="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", view=None)

        # --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ---
        class ReportCommentModal(discord.ui.Modal, title="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–≤–µ—Ç—É"):
            def __init__(self, report_message: discord.Message, response_type: str):
                super().__init__()
                self.report_message = report_message
                self.response_type = response_type

                self.comment = discord.ui.TextInput(
                    label=f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ({response_type})",
                    placeholder="–û–ø–∏—à–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É...",
                    style=discord.TextStyle.paragraph,
                    required=True,
                    max_length=1000
                )
                self.add_item(self.comment)

            async def on_submit(self, interaction: discord.Interaction):
                comment = self.comment.value

                embed = self.report_message.embeds[0]
                
                for i, field in enumerate(embed.fields):
                    if field.name == "üìä –°—Ç–∞—Ç—É—Å":
                        embed.set_field_at(i, name="üìä –°—Ç–∞—Ç—É—Å", value=self.response_type, inline=True)
                        break
                
                embed.color = discord.Color.green() if "‚úÖ" in self.response_type else discord.Color.orange()
                embed.add_field(name="üëÆ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", value=interaction.user.mention, inline=True)
                embed.add_field(name="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", value=comment, inline=False)

                if hasattr(self.report_message, '_view') and self.report_message._view:
                    view = self.report_message._view
                    if hasattr(view, 'thread') and view.thread:
                        try:
                            await view.thread.edit(archived=True, locked=True, reason=f"–†–µ–ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç: {self.response_type}")
                        except discord.HTTPException:
                            pass

                await self.report_message.edit(embed=embed, view=None)
                await interaction.response.send_message("‚úÖ –û—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ä–µ–ø–æ—Ä—Ç—É.", ephemeral=True)

        # --- View –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞ ---
        class AnswerTypeView(discord.ui.View):
            def __init__(self, report_message: discord.Message):
                super().__init__(timeout=120)
                self.report_message = report_message

            @discord.ui.button(label="–í—ã–ø–æ–ª–Ω–µ–Ω–æ", style=discord.ButtonStyle.success, emoji="‚úÖ")
            async def done_button(self, interaction: discord.Interaction, button: discord.ui.Button):
                modal = ReportCommentModal(self.report_message, "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
                await interaction.response.send_modal(modal)

            @discord.ui.button(label="–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ", style=discord.ButtonStyle.secondary, emoji="‚è≠Ô∏è")
            async def ignore_button(self, interaction: discord.Interaction, button: discord.ui.Button):
                modal = ReportCommentModal(self.report_message, "‚è≠Ô∏è –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                await interaction.response.send_modal(modal)

            @discord.ui.button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, emoji="‚ùå")
            async def cancel_button(self, interaction: discord.Interaction, button: discord.ui.Button):
                await interaction.response.edit_message(content="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", view=None)

        if report_message:
            view = ReportView(reporter, guild, blacklist, admin_roles_ids, thread)
            await report_message.edit(view=view)
# ====== –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã ======
class ReportReasonModal(discord.ui.Modal, title="–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã"):
    def __init__(self, cog: Reports, target_message: discord.Message):
        super().__init__()
        self.cog = cog
        self.target_message = target_message

        self.reason = discord.ui.TextInput(
            label="–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã",
            style=discord.TextStyle.paragraph,
            placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã...",
            required=False,
            max_length=500
        )
        self.add_item(self.reason)

    async def on_submit(self, interaction: discord.Interaction):
        await self.cog.send_report(
            interaction.guild, interaction.user, self.target_message, str(self.reason)
        )
        await interaction.response.send_message("‚úÖ –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.", ephemeral=True)


# ====== Context-menu (Message) ======
@app_commands.context_menu(name="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")
async def context_report(interaction: discord.Interaction, message: discord.Message):
    cog: Reports | None = interaction.client.get_cog("Reports")
    if cog is None:
        await interaction.response.send_message("–û—à–∏–±–∫–∞: Reports cog –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.", ephemeral=True)
        return

    await interaction.response.send_modal(ReportReasonModal(cog, message))


async def setup(bot: commands.Bot):
    reports_cog = Reports(bot)
    await bot.add_cog(reports_cog)

    try:
        bot.tree.add_command(context_report)
    except Exception:
        pass
